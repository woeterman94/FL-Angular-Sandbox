name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  DOTNET_VERSION: '8.0.x'
  NODE_VERSION: '20.x'

jobs:
  build-angular:
    name: Build Angular Application
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: angularapp2.client/package-lock.json

    - name: Install Angular dependencies
      working-directory: ./angularapp2.client
      run: |
        if [ -f package-lock.json ]; then
          npm ci
        else
          npm install
        fi

    - name: Lint Angular application
      working-directory: ./angularapp2.client
      run: |
        if npm run lint --if-present; then
          echo "Linting completed successfully"
        else
          echo "No lint script found or linting failed"
        fi

    - name: Build Angular application
      working-directory: ./angularapp2.client
      run: npm run build

    - name: Test Angular application
      working-directory: ./angularapp2.client
      run: npm run test -- --watch=false --browsers=ChromeHeadless

    - name: Upload Angular build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: angular-dist
        path: angularapp2.client/dist/
        retention-days: 30

  build-dotnet:
    name: Build .NET Applications
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: Cache .NET packages
      uses: actions/cache@v3
      with:
        path: ~/.nuget/packages
        key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj') }}
        restore-keys: |
          ${{ runner.os }}-nuget-

    - name: Restore ClassLibrary1
      run: dotnet restore ClassLibrary1/ClassLibrary1.csproj

    - name: Build ClassLibrary1
      run: dotnet build ClassLibrary1/ClassLibrary1.csproj --configuration Release --no-restore

    - name: Test ClassLibrary1
      run: dotnet test ClassLibrary1/ClassLibrary1.csproj --configuration Release --no-build --verbosity normal || echo "No tests found in ClassLibrary1"

    - name: Restore AngularApp2.Server (may include Angular dependencies)
      run: dotnet restore AngularApp2.Server/AngularApp2.Server.csproj

    - name: Build AngularApp2.Server
      run: dotnet build AngularApp2.Server/AngularApp2.Server.csproj --configuration Release --no-restore

    - name: Test AngularApp2.Server
      run: dotnet test AngularApp2.Server/AngularApp2.Server.csproj --configuration Release --no-build --verbosity normal || echo "No tests found in AngularApp2.Server"

    - name: Publish AngularApp2.Server
      run: dotnet publish AngularApp2.Server/AngularApp2.Server.csproj --configuration Release --output ./publish-server --no-restore

    - name: Upload .NET build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: dotnet-server
        path: |
          ./publish-server/
          ClassLibrary1/bin/Release/
        retention-days: 30

  integration-build:
    name: Full Integration Build
    runs-on: ubuntu-latest
    needs: [build-angular, build-dotnet]
    if: always() && (needs.build-angular.result == 'success' || needs.build-dotnet.result == 'success')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download Angular artifacts
      if: needs.build-angular.result == 'success'
      uses: actions/download-artifact@v4
      with:
        name: angular-dist
        path: angularapp2.client/dist/

    - name: Download .NET artifacts
      if: needs.build-dotnet.result == 'success'
      uses: actions/download-artifact@v4
      with:
        name: dotnet-server
        path: ./artifacts/

    - name: Prepare deployment package
      run: |
        mkdir -p ./deployment-package/server
        mkdir -p ./deployment-package/client
        
        # Copy server files if available
        if [ -d "./artifacts/publish-server" ]; then
          cp -r ./artifacts/publish-server/* ./deployment-package/server/
        fi
        
        # Copy client files if available
        if [ -d "./angularapp2.client/dist" ]; then
          cp -r ./angularapp2.client/dist/* ./deployment-package/client/
        fi

    - name: Upload deployment package
      uses: actions/upload-artifact@v4
      with:
        name: deployment-package
        path: ./deployment-package/
        retention-days: 30

    - name: Build status summary
      run: |
        echo "## Build Summary" >> $GITHUB_STEP_SUMMARY
        echo "- Angular Build: ${{ needs.build-angular.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- .NET Build: ${{ needs.build-dotnet.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- Integration Build: success" >> $GITHUB_STEP_SUMMARY